version: 2.1

orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
# Orchestrate or schedule a set of jobs

commands:

  # npm-prepare:
  #   description: Update & Upgrade npm then run install and scan for vulnerabilities 
  #   parameters: 
  #     path: 
  #       type: string
  #       default: .
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     # - restore_cache:
  #     #     keys:
  #     #       - v2-dependencies-{{ checksum "~/project/frontend/package-lock.json" }} v2-dependencies-{{ checksum "~/project/frontend/package.json" }}
  #     - run:
  #         name: Prepare npm
  #         command: |
  #           cd << parameters.path >>
  #           if [ ! -d "node_modules" ]; then
  #             npm update && npm upgrade
  #             npm install
  #           fi
  #     # - save_cache:
  #     #     paths:
  #     #       - ~/project/<< parameters.path >>/package-lock.json
  #     #       - ~/project/<< parameters.path >>/node_modules
  #     #       - ~/project/<< parameters.path >>/package.json
  #     #     key: v2-dependencies-{{ checksum "~/project/<< parameters.path >>/package-lock.json" }} v2-dependencies-{{ checksum "~/project/<< parameters.path >>/package.json" }}

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/<< parameters.path >>/package-lock.json
  #           - project/<< parameters.path >>/node_modules
  #           - project/<< parameters.path >>/package.json
  # # npm-prepare:
  # #   description: Update & Upgrade npm then run install and scan for vulnerabilities 
  # #   parameters: 
  # #     path: 
  # #       type: string
  # #       default: .
  # #   steps:
  # #     - restore_cache:
  # #         keys:
  # #           - v1-dependencies-{{ checksum "package.json" }}
  # #     - run:
  # #         name: Prepare npm
  # #         command: |
  # #           cd << parameters.path >>
  # #           npm update && npm upgrade
  # #     - run:
  # #         name: install npm
  # #         command: |
  # #           cd << parameters.path >>
  # #           npm install
  # #     - run:
  # #         name: scan for vulnerabilities
  # #         command: |
  # #           cd << parameters.path >>
  # #           (npm audit --audit-level=critical || npm audit fix) || (npm audit --audit-level=critical || (npm audit fix --audit-level=critical --force && npm audit --audit-level=critical))
  # #     - save_cache:
  # #         paths:
  # #           - node_modules
  # #         key: v1-dependencies-{{ checksum "package.json" }} #test
    
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
      event: 
        type: string
        default: on_fail
      repository:
        type: string
        default: udapeople-hdsfheiuwskjdhue
    steps:
      - run:
          name: install dependencies
          when: << parameters.event >>
          command: |
            pip install awscli || (apt-get -y update && apt-get -y install awscli)
      - run:
          name: Destroy environments
          when: << parameters.event >> # << parameters.workflow_id >> #
          command: |
            # Your code here
            echo "Destroy environment: << parameters.workflow_id >> "
            aws s3 rm s3://<< parameters.repository >> --recursive
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            #rm ~/project/.circleci/ansible/inventory.txt
            #rm ~/project/frontend/package-lock.json  
            #rm ~/project/backend/package-lock.json  

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/7zG47ZiNxLmoZJKhd1JPyc/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=$(ACCESS_TOKEN))

            if [ ${SUCCESS} = "1" ];
            then
              cd ~/project/backend
              npm i
              npm run migrations:revert
            fi
            

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0 # circleci/node:13.8.0
    steps:
      - checkout
      # - attach_workspace:
      #     at: ~/
      # - restore_cache:
      #     keys: 
      #       - v2-dependencies-{{ checksum "~/project/frontend/package-lock.json" }}-v2-dependencies-{{ checksum "~/project/frontend/package.json" }}
      # - npm-prepare:
      #     path: frontend
      - run:
          name: build
          command: |
            cd frontend
            ls -ltr
            if [ ! -d "node_modules" ]; then
              # npm update && npm upgrade
              npm install
              npm run build
            fi
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-build #temporary
      # - save_cache:
      #     paths:
      #       - ~/project/frontend/package-lock.json
      #       - ~/project/frontend/node_modules
      #       - ~/project/frontend/package.json
      #     key: v2-dependencies-{{ checksum "~/project/frontend/package-lock.json" }} v2-dependencies-{{ checksum "~/project/frontend/package.json" }}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend
      - run: 
          name: clean on fail
          when: on_fail
          command: |
           #rm ~/project/frontend/package-lock.json
           rm -r ~/project/frontend/node_modules

  build-backend:
    docker:
      - image: cimg/node:13.8.0 #circleci/node:13.8.0
    steps:
      - checkout
      # - npm-prepare:
      #     path: backend
      # - save_cache:
      #     paths:
      #       - ~/project/backend/package-lock.json
      #       - ~/project/backend/node_modules
      #       - ~/project/backend/package.json
      #     key: v2-dependencies-{{ checksum "~/project/backend/package-lock.json" }} v2-dependencies-{{ checksum "~/project/backend/package.json" }}
      # - restore_cache:
      #     keys: [backend]
      # - npm-prepare:
      #     path: frontend
      - run:
          name: build
          command: |
            cd backend
            if [ ! -d "node_modules" ]; then
              # npm update && npm upgrade &&
              npm install &&
              npm run build
            fi
      - run: 
          name: clean on fail
          when: on_fail
          command: |
           #rm ~/project/backend/package-lock.json
           rm -r ~/project/backend/node_modules
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build #temporary
      # - save_cache:
      #     paths:
      #       - ~/project/backend/package-lock.json
      #       - ~/project/backend/node_modules
      #       - ~/project/backend/package.json
      #     key: backend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend


  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0 #circleci/node:13.8.0 #?
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      # - restore_cache:
      #     keys: [frontend-build]
      # - npm-prepare:
      #     path: frontend
      - attach_workspace:
          at: ~/
      - run:
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image:  cimg/node:13.8.0 #circleci/node:13.8.0 #?
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      # - npm-prepare:
      #     path: backend
      - attach_workspace:
          at: ~/
      - run:
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0 # circleci/node:13.8.0 #?
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      # - restore_cache:
      #     keys: [frontend-build]
      # - npm-prepare:
      #     path: frontend
      - attach_workspace:
          at: ~/
      - run: 
          command: |
            cd frontend
            npm audit --audit-level=critical || (npm audit fix --audit-level=critical --force && npm audit fix --audit-level=critical --force && npm audit --audit-level=critical)

  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0 # circleci/node:13.8.0 #?
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      # - npm-prepare:
      #     path: backend #
      - attach_workspace:
          at: ~/
      - run: 
          command: |
            cd backend
            npm audit --audit-level=critical || (npm audit fix --audit-level=critical --force && npm audit fix --audit-level=critical --force && npm audit --audit-level=critical)
      # - save_cache:
      #     paths:
      #       - ~/project/backend/package-lock.json
      #       - ~/project/backend/node_modules
      #       - ~/project/backend/package.json
      #     key: v2-dependencies-{{ checksum "~/project/frontend/package-lock.json" }}-v2-dependencies-{{ checksum "~/project/frontend/package.json" }}
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/backend

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git # 5. 1.a. Create the Infrastructure
      - checkout
      - run: # 5. 1.a. Create the Infrastructure - install tar and gzip
          name: install dependencies # gzip and tar
          command: |
              yum -y update
              yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/frontend.yml \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople 
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            instance_ip=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            echo "$instance_ip" >> ~/project/.circleci/ansible/inventory.txt 
            echo "Instance IP: $instance_ip"
            echo "Inventory file output:"
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - ${SSH_FINGERPRINT}      
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
             apk add --update ansible
      # attach workspace
      - attach_workspace:
          at: ~/ #project/.circleci/ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure    
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0 #circleci/node:latest
        user: root
    steps:
      - checkout

      # - restore_cache:
      #     keys: [backend-build]
      # - run:
      #     name: Install dependencies
      #     command: |
      #       sudo apt-get update -y && sudo apt install -y awscli #test
      - attach_workspace:
          at: ~/

      # - npm-prepare:
      #     path: backend
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            MIGRATIONS_OUTPUT=$(npm run migrations)
      - run:
          name: Send migration results to kvdb
          command: |
            echo ${MIGRATIONS_OUTPUT}
            if grep -q "has been executed successfully" ${MIGRATIONS_OUTPUT}; then
              curl https://kvdb.io/7zG47ZiNxLmoZJKhd1JPyc/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=${ACCESS_TOKEN} -d "1"
              echo "Executed: successfully! Url: https://kvdb.io/7zG47ZiNxLmoZJKhd1JPyc/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=${ACCESS_TOKEN}"
            else
              curl https://kvdb.io/7zG47ZiNxLmoZJKhd1JPyc/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=${ACCESS_TOKEN} -d "0"
              echo "Executed: failed! https://kvdb.io/7zG47ZiNxLmoZJKhd1JPyc/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=${ACCESS_TOKEN}"
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
      docker:
        - image: cimg/node:13.8.0
          user: root
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt-get update -y && sudo apt-get -y install awscli
        - attach_workspace:
            at: ~/
        - run:
            name: Set env variables
            command: | 
              export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
              # export private_dns=$(aws ec2 describe-instances --filters "Name=network-interface.association.public-ip,Values=$instance_ip" --query "Reservations[].Instances[].PrivateDnsName" --output text)
              # export BACKEND_IP=$(grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' ~/project/.circleci/ansible/inventory.txt) &&
              export API_URL="http://${BACKEND_IP}:3030" &&
              echo $API_URL >> ~/project/frontend/.env &&
              echo "ENVIRONMENT = production"  >> ~/project/frontend/.env &&
              echo "NODE_ENV = production" >> ~/project/frontend/.env
        # - npm-prepare:
        #     path: frontend
        - run:
            name: Build frontend objects
            command: |
                cd frontend
                cat .env
                npm install
                npm run build
                tar -czvf artifact.tar.gz dist
                mv artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/artifact-frontend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz
                # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - run:
            name: Deploy frontend objects
            command: |
                aws s3 cp frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              # aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
        - destroy-environment
        - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11 #cimg/node:13.8.0 #
        # user: root
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: $(SSH_FINGERPRINT) 
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies
          command: |
            # # sudo apt update
            # # sudo apt install software-properties-common
            # # sudo add-apt-repository --yes --update ppa:ansible/ansible
            # #gzip curl
            # sudo apt-get update -y && sudo apt-get -y install awscli ansible
            # install the dependencies needed for your playbook
            apk add --update ansible curl nodejs npm
            # pip install awscli #test
      # - run:
      #     name: install node modules
      #     command: |
      #       cd /root/project/backend
      #       npm install
      #       npm audit fix --audit-level=critical --force
      #       ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
      #       #npm audit fix --force
      #       #npm audit --audit-level=critical
      - run: 
          name: setup environment variables
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"

            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            # cat backend/.env
      - run:
          name: build backend dist
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: build zip file
          command: |
            cd ~/project
            tar -zcvf api.tar.gz backend/
            mv api.tar.gz ~/project/.circleci/ansible/roles/deploy/files/artifact-backend.tar.gz
      - run:
          name: add ansible config
          command: |
            # echo "[default]" > ansible.cfg
            # echo "log_path=~/project/.circleci/ansible/roles/deploy/files/ansible.log" >> ansible.cfg #

      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
            cat ~/project/.circleci/ansible/roles/deploy/files/ansible.log
          environment:
            ANSIBLE_LOG_PATH: ~/project/.circleci/ansible/roles/deploy/files/ansible.log
            ANSIBLE_DEBUG: "True"
      - store_artifacts:
          path: ~/project/.circleci/ansible/roles/deploy/files/ansible.log
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build #temporary 
      # - save_cache:
      #     paths:
      #       - ~/project/frontend/package-lock.json
      #       - ~/project/frontend/node_modules
      #       - ~/project/frontend/package.json
      #     key: v2-dependencies-{{ checksum "~/project/frontend/package-lock.json" }} v2-dependencies-{{ checksum "~/project/frontend/package.json" }}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            # pip install awscli #test
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' .circleci/ansible/inventory.txt)
            echo "-------------------------------------"
            echo BACKEND_URL: http://${BACKEND_IP}:3030/api/status
            echo "-------------------------------------"
            if curl -s http://${BACKEND_IP}:3030/api/status | grep "ok"
            then
              echo "Backend Smoke Test Success"
              exit 0
            else
              echo "Backend Smoke Test Failed" 
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            echo "------------------------------------"
            echo http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/
            echo "------------------------------------"

            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/ | grep "Welcome"
            then
              echo "Frontend Smoke Test Success"
              return 0
            else
              echo "Frontend Smoke Test Failed"
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get EC2 instances
          command: |
           export instance_ip=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
           export private_dns=$(aws ec2 describe-instances --filters "Name=network-interface.association.public-ip,Values=$instance_ip" --query "Reservations[].Instances[].PrivateDnsName" --output text)
           echo $instance_ip
           echo $private_dns
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name InitialStack \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7},UsePreviousValue=false 
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # Fetch the stack names
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack names: "${STACKS[@]}"

            # Remove old stacks and files
            echo THIS IS THE OldWorkflowID: "${OldWorkflowID}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
            fi
      - destroy-environment
      - revert-migrations
 
workflows:
  default:
    jobs: # test
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
